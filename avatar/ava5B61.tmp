[gd_scene load_steps=2 format=3 uid="uid://jxf48sqmhle6"]

[sub_resource type="GDScript" id="GDScript_vfqsa"]
script/source = "extends Node2D

@export_dir 
var avatar_path : String = \"\" : 
	set(value):
		if not DirAccess.dir_exists_absolute(value):
			push_error(\"path is not exists: \", value)
			return
		var xml_path: String = value+\"/character.xml\"
		if not FileAccess.file_exists(xml_path):
			push_error(\"character.xml is not exists.\")
			return
		avatar_path = value
		_load_character_xml(xml_path)
		pass


var avatar_name : String
var avatar_image_size : Vector2;


class AvatarPartLayer:
	var dir : String
	var id : String
	var order : int
	var color_group_id : String
	var display_name : String
	var color_model : String
	func _init(_dir, _id, _order, _color_group_id, _display_name, _color_model):
		dir = _dir
		id = _id
		order = _order
		color_group_id = _color_group_id
		display_name = _display_name
		color_model = _color_model
	

class AvatarBodyPart:
	var name : String
	var category : String
	var layers : Array[AvatarPartLayer]
	func _init(_name, _category, _layers):
		name = _name
		category = _category
		layers = _layers


class AvatarCategory:
	var name : String
	var id : String
	var multiple_selectable : bool
	var optional : bool
	var bodys : Array[AvatarBodyPart]
	func _init(_name, _id, _bodys, _multiple_selectable, _optional):
		name = _name
		id = _id
		bodys = _bodys
		multiple_selectable = _multiple_selectable
		optional = _optional
		

class AvatarColorGroup:
	var id : String
	var name : String
	func _init(_id, _name):
		id = _id
		name = _name


func _find_node_children(node: Dictionary, children_name: String) -> Dictionary:
	for children in node[\"children\"]:
		if children[\"name\"] == children_name:
			return children
	return node

	
func _find_node_chilren_content(node: Dictionary, children_name: String):
	var child: Dictionary = _find_node_children(node, children_name)
	if child != node:
		return child[\"__content__\"]
	return

	
func _find_node_childrens(node: Dictionary, childrens: Array[String]) -> Dictionary:
	var currentNode = node
	for children_name in childrens:
		var child = _find_node_children(currentNode, children_name)
		if child == currentNode:
			return node
		currentNode = child
	return currentNode


func _find_node_childrens_content(node: Dictionary, childrens: Array[String]):
	var child: Dictionary = _find_node_childrens(node, childrens)
	if child != node:
		return child[\"__content__\"]
	return


func _load_character_xml(path):
	var root = XML.parse_file(path).to_dict()
	avatar_name = _find_node_chilren_content(root, \"name\")
	print(\"avatar_name: \", avatar_name)
	var width : int = _find_node_childrens_content(root, [\"image-size\", \"width\"])
	var height : int = _find_node_childrens_content(root, [\"image-size\", \"height\"])
	avatar_image_size = Vector2(width, height)
	var color_groups = _find_node_children(root, \"colorGroups\")
	_build_avatar_color_groups(color_groups)
	var categories = _find_node_children(root, \"categories\")
	

func _build_avatar_color_groups(node : Dictionary):
	for color_group_node in node:
		print(color_group_node)
	
	#for node in dict[\"children\"]:
#		var node_name = node[\"name\"]
#		if node_name == \"name\":
	#		avatar_name = node[\"__content__\"]
	#	elif node_name == \"image-size\":
	#		avatar_image_size = (node)


# Called when the node enters the scene tree for the first time.
func _ready():
	#test_load(\"res://avatar/「みゆ」サイズ小/character.xml\")
	#test_load(\"res://avatar/test.xml\")
	#load_xml(\"res://avatar/test.xml\")
	#load_xml(\"res://avatar/「みゆ」サイズ小/character.xml\")
	print(avatar_path)
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
"

[node name="Avatar" type="Node2D"]
script = SubResource("GDScript_vfqsa")
avatar_path = "res://avatar/「みゆ」サイズ小"
