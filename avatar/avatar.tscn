[gd_scene load_steps=2 format=3 uid="uid://jxf48sqmhle6"]

[sub_resource type="GDScript" id="GDScript_vfqsa"]
script/source = "extends Node2D

@export_dir 
var avatar_path : String = \"\" : 
	set(value):
		if not DirAccess.dir_exists_absolute(value):
			push_error(\"path is not exists: \", value)
			return
		var xml_path: String = value+\"/character.xml\"
		if not FileAccess.file_exists(xml_path):
			push_error(\"character.xml is not exists.\")
			return
		avatar_path = value
		_load_character_xml(xml_path)
		_init_all_texture()
		pass


var avatar_name : String
var avatar_image_size : Vector2;
var avatar_color_group_dict : Dictionary
var avatar_category_dict : Dictionary

# key : category_id,  value : { layer_id : AvatarPartLayer}
var avatar_layer_dict : Dictionary

# key : category_id,  value : { body_name : AvatarBodyPart}
var avatar_body_part_dict : Dictionary

# key : category_id,  value : { body_name : { layer_id : texture } }
var avatar_texture_dict : Dictionary

func _init_all_texture():
	avatar_texture_dict = {}
	for category in avatar_category_dict.values():
		for body in category.bodys:
			for layer in body.layers:
				print(\"category: %s, body: %s, layer: %s, order: %d\" % [category.name, body.name, layer.display_name, layer.order])

func _create_sprite(path):
	var sprite = Sprite2D.new()
	var texture = ImageTexture.new()
	$CanvasLayer.add_child(sprite)



class AvatarPartLayer:
	var dir : String
	var id : String
	var order : int
	var color_group_id : String
	var display_name : String
	var color_model : String
	func _init(_dir, _id, _order, _color_group_id, _display_name, _color_model):
		dir = _dir
		id = _id
		order = _order
		color_group_id = _color_group_id
		display_name = _display_name
		color_model = _color_model
	func _to_string() -> String:
		var dict = {}
		dict[\"dir\"] = dir
		dict[\"id\"] = id
		dict[\"order\"] = order
		dict[\"color_group_id\"] = color_group_id
		dict[\"display_name\"] = display_name
		dict[\"color_model\"] = color_model
		return str(dict)
	

class AvatarBodyPart:
	var name : String
	var category_id : String
	var category_name : String
	var layers : Array[AvatarPartLayer]
	func _init(_name, _category_id, _category_name, _layers):
		name = _name
		category_id = _category_id
		category_name = _category_name
		layers = _layers
	func _to_string() -> String:
		var dict = {}
		dict[\"name\"] = name
		dict[\"category_id\"] = category_id
		dict[\"category_name\"] = category_name
		dict[\"layers\"] = layers
		return str(dict)


class AvatarCategory:
	var name : String
	var id : String
	var multiple_selectable : bool
	var optional : bool
	var bodys : Array[AvatarBodyPart]
	func _init(_name, _id, _bodys, _multiple_selectable, _optional):
		name = _name
		id = _id
		bodys = _bodys
		if _multiple_selectable.to_lower() == \"true\":
			multiple_selectable = true
		else:
			multiple_selectable = false
		if _optional.to_lower() == \"true\":
			optional = true
		else:
			optional = false
	func _to_string() -> String:
		var dict = {}
		dict[\"name\"] = name
		dict[\"id\"] = id
		dict[\"multiple_selectable\"] = multiple_selectable
		dict[\"optional\"] = optional
		dict[\"bodys\"] = bodys
		return str(dict)
		

class AvatarColorGroup:
	var id : String
	var name : String
	func _init(_id, _name):
		id = _id
		name = _name
	func _to_string() -> String:
		var dict = {}
		dict[\"name\"] = name
		dict[\"id\"] = id
		return str(dict)
		

func _find_node_children(node: Dictionary, children_name: String) -> Dictionary:
	for children in node[\"children\"]:
		if children[\"name\"] == children_name:
			return children
	return node

	
func _find_node_children_content(node: Dictionary, children_name: String):
	var child: Dictionary = _find_node_children(node, children_name)
	if child != node:
		return child[\"__content__\"]
	return

	
func _find_node_childrens(node: Dictionary, childrens: Array[String]) -> Dictionary:
	var currentNode = node
	for children_name in childrens:
		var child = _find_node_children(currentNode, children_name)
		if child == currentNode:
			return node
		currentNode = child
	return currentNode


func _find_node_childrens_content(node: Dictionary, childrens: Array[String]):
	var child: Dictionary = _find_node_childrens(node, childrens)
	if child != node:
		return child[\"__content__\"]
	return


func _load_character_xml(path):
	var root = XML.parse_file(path).to_dict()
	avatar_name = _find_node_children_content(root, \"name\")
	print(\"avatar_name: \", avatar_name)

	var width : String = _find_node_childrens_content(root, [\"image-size\", \"width\"])
	var height : String = _find_node_childrens_content(root, [\"image-size\", \"height\"])
	avatar_image_size = Vector2(float(width), float(height))
	print(\"avatar_image_size: \", avatar_image_size)
	
	var color_groups_node = _find_node_children(root, \"colorGroups\")
	avatar_color_group_dict = _build_avatar_color_group_dict(color_groups_node)
	print(\"avatar_color_group_dict: \", avatar_color_group_dict.keys())
	
	var categories_node = _find_node_children(root, \"categories\")
	avatar_category_dict = _build_avatar_category_dict(categories_node)
	print(\"avatar_category_dict: \", avatar_category_dict.keys())
	

func _build_avatar_color_group_dict(node : Dictionary) -> Dictionary:
	var dict = {}
	for color_group_node in node[\"children\"]:
		var id = color_group_node[\"attributes\"][\"id\"]
		var name = _find_node_children_content(color_group_node, \"display-name\")
		var group = AvatarColorGroup.new(id, name)
		dict[id] = group
	return dict


func _build_avatar_category_dict(node : Dictionary) -> Dictionary:
	var dict = {}
	avatar_layer_dict = {}
	avatar_body_part_dict = {}
	var body_to_layer = {}
	for category_node in node[\"children\"]:
		var category_id = category_node[\"attributes\"][\"id\"]
		var multiple_selectable = category_node[\"attributes\"][\"multipleSelectable\"]
		var optional = category_node[\"attributes\"][\"optional\"]
		var category_name = _find_node_children_content(category_node, \"display-name\")
		var layer_nodes = _find_node_children(category_node, \"layers\")
		var layer_dict = _build_avatar_part_layer_dict(layer_nodes)
		avatar_layer_dict[category_id] = layer_dict
		var body_part_dict = _build_avatar_body_part_dict(layer_nodes)
		for body_name in body_part_dict.keys():
			var layer_array : Array[AvatarPartLayer] = []
			for layer_id in body_part_dict[body_name]:
				var layer_object : AvatarPartLayer = avatar_layer_dict[category_id][layer_id]
				layer_array.push_back(layer_object)
			var body_part = AvatarBodyPart.new(body_name, category_id, category_name, layer_array)
			if category_id not in avatar_body_part_dict:
				avatar_body_part_dict[category_id] = {}
			avatar_body_part_dict[category_id][body_name] = body_part
		var bodys : Array[AvatarBodyPart] = []
		for body in avatar_body_part_dict[category_id].values():
			bodys.push_back(body)
		var category = AvatarCategory.new(category_name, category_id, bodys, multiple_selectable, optional)
		dict[category_id] = category
	return dict


func _build_avatar_body_part_dict(node : Dictionary) -> Dictionary:
	var dict = {}
	for layer_node in node[\"children\"]:
		var id = layer_node[\"attributes\"][\"id\"]
		var dir = _find_node_children_content(layer_node, \"dir\")
		var body_part_path = avatar_path + \"/\" + dir
		var filenames = DirAccess.get_files_at(body_part_path)
		for filename in filenames:
			if not filename.ends_with(\".png\"):
				continue
			var name = filename.substr(0, len(filename)-4)
			if name not in dict:
				dict[name] = [id]
			else:
				dict[name].push_back(id)
	return dict
	
func _build_avatar_part_layer_dict(node : Dictionary) -> Dictionary:
	var dict = {}
	for layer_node in node[\"children\"]:
		var id = layer_node[\"attributes\"][\"id\"]
		var color_group_node = _find_node_children(layer_node, \"colorGroup\")
		var color_group_id : String = \"\"
		if color_group_node != layer_node:
			color_group_id = color_group_node[\"attributes\"][\"refid\"]
		var display_name = _find_node_children_content(layer_node, \"display-name\")
		var order : String = _find_node_children_content(layer_node, \"order\")
		var dir = _find_node_children_content(layer_node, \"dir\")
		var color_model = _find_node_children_content(layer_node, \"colorModel\")
		var partLayer = AvatarPartLayer.new(dir, id, int(order), color_group_id, display_name, color_model)
		dict[id] = partLayer
	return dict


	
	
	
	#for node in dict[\"children\"]:
#		var node_name = node[\"name\"]
#		if node_name == \"name\":
	#		avatar_name = node[\"__content__\"]
	#	elif node_name == \"image-size\":
	#		avatar_image_size = (node)


# Called when the node enters the scene tree for the first time.
func _ready():
	#test_load(\"res://avatar/「みゆ」サイズ小/character.xml\")
	#test_load(\"res://avatar/test.xml\")
	#load_xml(\"res://avatar/test.xml\")
	#load_xml(\"res://avatar/「みゆ」サイズ小/character.xml\")
	print(avatar_path)
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(delta):
	pass
"

[node name="Avatar" type="Node2D"]
script = SubResource("GDScript_vfqsa")
avatar_path = "res://avatar/「みゆ」サイズ小"

[node name="CanvasLayer" type="CanvasLayer" parent="."]
